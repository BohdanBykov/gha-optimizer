"""Console report generator using Jinja2 templates."""

from datetime import datetime
from typing import Any, Dict, List

from jinja2 import Template

from ..utils.config import Config


class ConsoleReporter:
    """Generates console reports using Jinja2 templates."""

    # Simple emoji mapping
    TYPE_EMOJIS = {
        "caching": "💾",
        "parallelization": "⚡",
        "runner-optimization": "🏃",
        "conditional": "🎯",
        "security": "🔒",
        "workflow-optimization": "⚙️",
        "optimization": "🔧",
        "docker": "🐳",
    }

    PRIORITY_EMOJIS = {
        "critical": "🚨",
        "high": "🔥",
        "medium": "⚡",
        "low": "📝",
    }

    # Main report template
    REPORT_TEMPLATE = """
{%- set dash60 = '─' * 60 -%}
{%- set dash80 = '─' * 80 -%}
{%- set equal80 = '=' * 80 -%}
{{ equal80 }}
🤖 GHA-OPTIMIZER AI ANALYSIS REPORT
{{ equal80 }}
📦 Repository: {{ repository }}
📅 Analysis Date: {{ analysis_date }}
⚡ Workflows Analyzed: {{ workflow_count }} files
📊 Analysis Period: {{ analysis_days }} days ({{ runs_count }} total runs)
🏃 Activity Level: {{ activity_level }} (~{{ runs_per_week }} runs/week)

📊 OPTIMIZATION SUMMARY
{{ dash60 }}
🎯 Opportunities Found: {{ opportunities_count }} optimization(s)
💰 Monthly Savings: ${{ monthly_savings }}
⏱️  Time Savings: {{ time_savings }} min/run
📈 ROI Impact: {{ roi_percentage }}% cost reduction
{%- if breakdown_lines %}

📊 OPTIMIZATION BREAKDOWN
{{ dash60 }}
{%- for line in breakdown_lines %}
{{ line }}
{%- endfor %}
{%- endif %}
{%- for priority_section in priority_sections %}

{{ priority_section.emoji }} {{ priority_section.title }}
{{ dash60 }}
{%- for rec in priority_section.recommendations %}
{{ rec.index }}. {{ rec.type_emoji }} {{ rec.title }}
   📄 Workflow: {{ rec.workflow }}{% if rec.line_number %} (Line {{ rec.line_number }}){% endif %}
   📝 Description: {{ rec.description }}
   💰 Impact: {{ rec.impact }} → {{ rec.monthly_savings }}/month
{%- if rec.implementation %}
   🔧 Implementation: {{ rec.implementation }}
{%- endif %}
{%- if rec.ai_insights %}
   🤖 AI Insight: {{ rec.ai_insights }}
{%- endif %}

{%- endfor %}
{%- endfor %}

📋 NEXT STEPS
{{ dash60 }}
1. Run: gha-optimizer apply {{ repository }} --priority high
2. Review and merge generated optimizations
3. Monitor performance improvements
4. Schedule monthly re-analysis for continuous improvement

{{ dash80 }}
🤖 AI-Powered Analysis
⚡ Generated by GHA-Optimizer v0.1.0 • Runtime: {{ runtime }}s
{{ dash80 }}
""".strip()

    def __init__(self, config: Config):
        """Initialize console reporter."""
        self.config = config
        self.template = Template(self.REPORT_TEMPLATE)

    def generate_report(
        self,
        repository: str,
        recommendations: List[Dict[str, Any]],
        estimated_savings: float,
        time_savings: float,
        workflow_data: Dict[str, Any],
    ) -> str:
        """Generate console report from data."""

        # Calculate metrics
        runs_per_week = (
            workflow_data["runs_count"] * 7 / workflow_data["analysis_days"]
            if workflow_data["analysis_days"] > 0
            else 0
        )
        activity_level = (
            "🔥 High"
            if runs_per_week > 20
            else "📊 Medium" if runs_per_week > 5 else "📉 Low"
        )

        # Build breakdown
        breakdown_lines = self._build_breakdown_lines(recommendations)

        # Group by priority
        priority_sections = self._build_priority_sections(recommendations)

        # Template data
        template_data = {
            "repository": repository,
            "analysis_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC"),
            "workflow_count": workflow_data["workflow_count"],
            "analysis_days": workflow_data["analysis_days"],
            "runs_count": workflow_data["runs_count"],
            "activity_level": activity_level,
            "runs_per_week": f"{runs_per_week:.0f}",
            "opportunities_count": len(recommendations),
            "monthly_savings": f"{estimated_savings:.0f}",
            "time_savings": f"{time_savings:.1f}",
            "roi_percentage": f"{self._calculate_roi_percentage(estimated_savings):.0f}",
            "breakdown_lines": breakdown_lines,
            "priority_sections": priority_sections,
            "runtime": "2.3",
        }

        return self.template.render(**template_data)

    def _build_breakdown_lines(
        self, recommendations: List[Dict[str, Any]]
    ) -> List[str]:
        """Build optimization breakdown lines."""
        type_counts = {}
        type_savings = {}

        for rec in recommendations:
            opt_type = rec.get("type", "other")
            type_counts[opt_type] = type_counts.get(opt_type, 0) + 1

            savings_value = float(rec.get("monthly_cost_savings", 0))

            type_savings[opt_type] = (
                type_savings.get(opt_type, 0) + savings_value
            )

        lines = []
        for opt_type in sorted(type_counts.keys()):
            emoji = self.TYPE_EMOJIS.get(opt_type, "📋")
            count = type_counts[opt_type]
            savings = type_savings[opt_type]
            type_name = opt_type.replace("-", " ").title()
            lines.append(
                f"{emoji} {type_name}: {count} optimization(s) → ${savings:.0f}/month"
            )

        return lines

    def _build_priority_sections(
        self, recommendations: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """Build priority sections for template."""
        priority_groups = {"critical": [], "high": [], "medium": [], "low": []}

        # Group recommendations
        for rec in recommendations:
            priority = rec.get("priority", "medium").lower()
            if priority in priority_groups:
                priority_groups[priority].append(rec)

        # Build sections
        sections = []
        for priority, recs in priority_groups.items():
            if recs:
                section_recs = []
                for i, rec in enumerate(recs, 1):
                    impact = f"{rec.get('impact_time_minutes', 0):.1f} min/run saved"
                    monthly_savings = (
                        f"${rec.get('monthly_cost_savings', 0):.0f}"
                    )

                    section_recs.append(
                        {
                            "index": i,
                            "type_emoji": self.TYPE_EMOJIS.get(
                                rec.get("type", "unknown"), "📋"
                            ),
                            "title": rec["title"],
                            "workflow": rec.get(
                                "workflow_file",
                                rec.get("workflow", "Multiple files"),
                            ),
                            "line_number": rec.get("line_number", ""),
                            "description": rec["description"],
                            "impact": impact,
                            "monthly_savings": monthly_savings,
                            "implementation": rec.get("implementation"),
                            "ai_insights": rec.get("ai_insights"),
                        }
                    )

                sections.append(
                    {
                        "emoji": self.PRIORITY_EMOJIS.get(priority, "📝"),
                        "title": f"{priority.upper()} PRIORITY OPTIMIZATIONS",
                        "recommendations": section_recs,
                    }
                )

        return sections

    def _calculate_roi_percentage(self, monthly_savings: float) -> float:
        """Calculate ROI percentage."""
        baseline_cost = 800  # Assume baseline monthly CI/CD cost
        return (monthly_savings / baseline_cost) * 100
