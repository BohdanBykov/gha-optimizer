name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: "3.11"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -e ".[dev]"
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}.git
      
      - name: Determine version
        id: version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Current version in code: $CURRENT_VERSION"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release - calculate next version based on release type
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            echo "Manual release type: $RELEASE_TYPE"
            
            # Calculate next version based on semver
            case "$RELEASE_TYPE" in
              major)
                NEW_VERSION=$(python -c "v='$CURRENT_VERSION'.split('.'); print(f'{int(v[0])+1}.0.0')")
                ;;
              minor)
                NEW_VERSION=$(python -c "v='$CURRENT_VERSION'.split('.'); print(f'{v[0]}.{int(v[1])+1}.0')")
                ;;
              patch)
                NEW_VERSION=$(python -c "v='$CURRENT_VERSION'.split('.'); print(f'{v[0]}.{v[1]}.{int(v[2])+1}')")
                ;;
            esac
            
            echo "Calculated next version: $CURRENT_VERSION → $NEW_VERSION ($RELEASE_TYPE)"
          else
            # Tag push trigger - extract version from git tag
            TAG_NAME="${{ github.ref_name }}"
            NEW_VERSION="${TAG_NAME#v}"  # Remove 'v' prefix
            echo "Version from tag: $NEW_VERSION"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
      
      - name: Update version in code
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          echo "🏷️ Preparing release: v$NEW_VERSION"
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Update version in __init__.py  
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/gha_optimizer/__init__.py
          
          # Commit version bump back to main (only for manual releases)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git add pyproject.toml src/gha_optimizer/__init__.py
            git commit -m "chore: release v$NEW_VERSION"
            git push origin main
            git tag "v$NEW_VERSION"
            git push origin "v$NEW_VERSION"
          fi
      
      - name: Generate changelog
        if: steps.version.outputs.should_release == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          echo "# Release v$NEW_VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "📅 **Release Date**: $(date -u '+%Y-%m-%d')" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Changes since $LAST_TAG:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD^ >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$NEW_VERSION" >> CHANGELOG.md
          else
            echo "Initial release" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" HEAD^ | head -10 >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/v$NEW_VERSION" >> CHANGELOG.md
          fi
      
      - name: Build package
        if: steps.version.outputs.should_release == 'true'
        run: |
          python -m build
          ls -la dist/
      
      - name: Create GitHub Release
        if: steps.version.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          tag_name: "v${{ steps.version.outputs.new_version }}"
          name: "v${{ steps.version.outputs.new_version }}"
          body_path: CHANGELOG.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
          make_latest: true
