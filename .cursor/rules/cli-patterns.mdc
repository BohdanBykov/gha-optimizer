---
globs: "src/gha_optimizer/cli/**/*.py,src/gha_optimizer/commands/**/*.py"
---

# Click CLI Command Patterns for GHA-Optimizer

## CLI Architecture
The main CLI entry point is [src/gha_optimizer/cli/main.py](mdc:src/gha_optimizer/cli/main.py) using Click framework. Commands are implemented in [src/gha_optimizer/commands/](mdc:src/gha_optimizer/commands/).

## Standard Click Command Pattern
Follow this exact pattern for all CLI commands:

```python
@click.command()
@click.option('--repo', required=True, help='Repository name (owner/repo)')
@click.option('--config', type=click.Path(exists=True), help='Config file path')
@click.pass_context
def command_name(ctx: click.Context, repo: str, config: Optional[str]) -> None:
    """Command description that explains what it does clearly."""
    try:
        logger.info(f"Starting {command_name} for repository: {repo}")
        
        # Load configuration if provided
        if config:
            # Load config logic
            pass
            
        # Implementation here
        
        click.echo("Command completed successfully")
    except Exception as e:
        logger.error(f"Command failed: {e}")
        click.echo(f"Error: {e}", err=True)
        ctx.exit(1)
```

## Error Handling in CLI
- Always use `click.echo()` for user output
- Use `err=True` for error messages: `click.echo("Error message", err=True)`
- Exit with code 1 for errors: `ctx.exit(1)`
- Provide clear, actionable error messages for users

## Common CLI Option Patterns
```python
# Configuration file
@click.option('--config', type=click.Path(exists=True), 
              help='Path to configuration file')

# Repository specification
@click.option('--repo', required=True, 
              help='Repository name in format owner/repo')

# Output format control
@click.option('--output', type=click.Choice(['console', 'json']),
              default='console', help='Output format')

# Verbose logging
@click.option('--verbose', '-v', is_flag=True,
              help='Enable verbose logging')
```

## Help Text Standards
- Use clear, concise descriptions
- Include examples in help text when helpful
- Explain format requirements (e.g., "owner/repo" format)
- Use consistent terminology across commands

## Configuration Loading Pattern
Reference the config structure from [config.yml](mdc:config.yml) and [examples/config.yml](mdc:examples/config.yml):

```python
def load_config(config_path: str) -> Dict[str, Any]:
    """Load configuration from YAML file."""
    try:
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)
    except Exception as e:
        raise ConfigurationError(f"Failed to load config from {config_path}: {e}")
```

## User Output Guidelines
- Use `click.echo()` for all user-facing output
- Provide progress indicators for long-running operations
- Include helpful context in success/error messages
- Format output consistently across commands