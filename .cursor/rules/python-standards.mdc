---
globs: "*.py,src/**/*.py,test_cli.py"
---

# Python Coding Standards for GHA-Optimizer

## Code Quality Requirements
- **Type Hints**: All functions must include proper type hints
- **Docstrings**: All public functions and classes must have docstrings
- **Error Handling**: Must be graceful with clear user-facing messages
- **Junior Developer Focus**: Write code that less experienced developers can understand

## Function Pattern Template
```python
def analyze_workflow(workflow_path: str, config: Dict[str, Any]) -> AnalysisResult:
    """
    Analyze a GitHub Actions workflow file.
    
    Args:
        workflow_path: Path to the workflow file
        config: Configuration dictionary
        
    Returns:
        Analysis result with optimization suggestions
        
    Raises:
        WorkflowError: If workflow file is invalid
    """
    logger.info(f"Starting analysis of {workflow_path}")
    
    try:
        # Implementation here
        pass
    except Exception as e:
        logger.error(f"Analysis failed: {e}")
        raise WorkflowError(f"Unable to analyze workflow: {e}")
```

## Error Handling Pattern
Always provide clear, actionable error messages:
```python
try:
    result = risky_operation()
except SpecificException as e:
    logger.error(f"Operation failed: {e}")
    raise UserFriendlyError(
        "A clear explanation of what went wrong and how to fix it. "
        "Include actionable guidance when possible."
    )
```

## Import Organization (use isort)
```python
# Standard library imports
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional

# Third-party imports
import click
import requests
from anthropic import Anthropic

# Local imports
from gha_optimizer.models.workflow import Workflow
from gha_optimizer.utils.logger import get_logger
```

## Variable Naming Standards
Use descriptive names that explain purpose:
```python
# Good
workflow_optimization_suggestions = analyzer.analyze(workflow_content)
github_api_rate_limit_remaining = response.headers.get('X-RateLimit-Remaining')

# Bad - too generic
suggestions = analyzer.analyze(content)
rate_limit = response.headers.get('X-RateLimit-Remaining')
```

## Logging Pattern
Use consistent logging with the project's logger setup from [src/gha_optimizer/utils/logger.py](mdc:src/gha_optimizer/utils/logger.py):
```python
from gha_optimizer.utils.logger import get_logger

logger = get_logger(__name__)

def function_name():
    logger.info("Starting operation")
    try:
        # Implementation
        logger.debug("Operation completed successfully")
    except Exception as e:
        logger.error(f"Operation failed: {e}")
        raise
```