[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gha-optimizer"
version = "1.3.0"
description = "AI-Powered GitHub Actions Workflow Optimization Tool"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "GHA-Optimizer Team", email = "dev@gha-optimizer.dev"}
]
maintainers = [
    {name = "GHA-Optimizer Team", email = "dev@gha-optimizer.dev"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Systems Administration",
]
keywords = ["github-actions", "ci-cd", "optimization", "devops", "automation", "ai"]
requires-python = ">=3.9"

dependencies = [
    "click>=8.0.0",
    "requests>=2.28.0",
    "pyyaml>=6.0",
    "anthropic>=0.7.0",
    "jinja2>=3.1.0",
    "python-dateutil>=2.8.0",
    "rich>=13.0.0",  # For better CLI output formatting
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.4.0",
    "types-requests>=2.28.0",
    "bandit[toml]>=1.7.0",
    "build>=0.10.0",
    "pre-commit>=3.3.0",
    "responses>=0.23.0",  # For mocking HTTP requests in tests
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/your-org/gha-optimizer"
Documentation = "https://docs.gha-optimizer.dev"
Repository = "https://github.com/your-org/gha-optimizer.git"
"Bug Tracker" = "https://github.com/your-org/gha-optimizer/issues"
Changelog = "https://github.com/your-org/gha-optimizer/blob/main/CHANGELOG.md"

[project.scripts]
gha-optimizer = "gha_optimizer.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
gha_optimizer = ["patterns/*.yml", "templates/*.j2", "docs/*.md"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# flake8 configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    ".eggs",
    "*.egg-info",
]

# mypy configuration
[tool.mypy]
python_version = "1.3.0"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "yaml.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "1.3.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "api: marks tests that require API access",
]

[tool.coverage.run]
source = ["src/gha_optimizer"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 