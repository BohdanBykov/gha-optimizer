You are an expert GitHub Actions optimization analyst. Analyze ALL workflows below for optimization opportunities.

## Repository Context
- **Repository**: microsoft/vscode
- **Language**: TypeScript
- **Activity**: 100 runs in 30 days (~23/week)
- **Total Workflows**: 3


OPTIMIZATION PATTERNS TO DETECT:

## 1. HIGH-IMPACT OPTIMIZATIONS

### DEPENDENCY CACHING
**Node.js Dependencies:**
- Pattern: Look for "npm ci", "npm install", "yarn install" WITHOUT preceding actions/cache step
- Implementation: Add actions/cache@v3 with path ~/.npm and key based on package-lock.json
- Impact: 2-5 minutes saved per run, ~$50-150/month cost reduction

**Python Dependencies:**
- Pattern: Look for "pip install" WITHOUT preceding actions/cache step
- Implementation: Add actions/cache@v3 with path ~/.cache/pip and key based on requirements.txt
- Impact: 1-3 minutes saved per run

**Maven/Gradle Dependencies:**
- Pattern: Look for "mvn", "gradle" commands WITHOUT cache
- Implementation: Add actions/cache@v3 with path ~/.m2 or ~/.gradle
- Impact: 3-8 minutes saved per run

### JOB PARALLELIZATION
- Pattern: Sequential jobs with no dependencies that could run in parallel
- Pattern: Test suites running sequentially (unit, integration, e2e)
- Implementation: Split into parallel jobs or use matrix strategy
- Impact: 40-60% reduction in total pipeline time

### DOCKER OPTIMIZATION
- Pattern: "docker build" WITHOUT Docker layer caching
- Pattern: Multiple docker builds without BuildKit
- Implementation: Use docker/build-push-action@v4 with cache-from/cache-to
- Impact: 3-8 minutes saved per build

### RUNNER OPTIMIZATION
- Pattern: Over-provisioned runners (8-cores for linting, documentation builds)
- Pattern: Under-provisioned runners (basic for heavy compilation)
- Implementation: Right-size runners based on workload
- Cost Analysis: ubuntu-latest ($0.008/min), ubuntu-latest-4-cores ($0.016/min), ubuntu-latest-8-cores ($0.032/min)

## 2. MEDIUM-IMPACT OPTIMIZATIONS

### CONDITIONAL EXECUTION
- Pattern: Workflows triggering on ALL file changes
- Pattern: Missing path-based triggers for specific file types
- Implementation: Add paths filter to workflow triggers
- Impact: Reduce unnecessary runs by 30-50%

### ARTIFACT OPTIMIZATION
- Pattern: Uploading entire workspace as artifacts
- Pattern: Large artifacts without compression
- Implementation: Selective artifact upload, exclude unnecessary files
- Impact: Faster upload/download, reduced storage costs

### ENVIRONMENT OPTIMIZATION
- Pattern: Redundant setup steps across jobs
- Pattern: Missing shared caching between jobs
- Implementation: Use job outputs, shared setup job
- Impact: 1-2 minutes saved per job

ANALYSIS INSTRUCTIONS:
1. Scan each workflow for these exact patterns
2. Calculate time savings based on pattern type and repository activity
3. Estimate monthly cost savings using GitHub Actions pricing
4. Provide specific implementation with exact code examples
5. Set confidence scores based on pattern clarity (0.9 for obvious patterns, 0.7 for probable, 0.5 for possible)


## Workflows to Analyze

### Workflow WF01: `.github/workflows/pr.yml`
```yaml
  1| name: Code OSS
  2| 
  3| on:
  4|   pull_request:
  5|     branches:
  6|       - main
  7|       - 'release/*'
  8| 
  9| concurrency:
 10|   group: ${{ github.workflow }}-${{ github.ref }}
 11|   cancel-in-progress: true
 12| 
 13| permissions: {}
 14| 
 15| env:
 16|   VSCODE_QUALITY: 'oss'
 17| 
 18| jobs:
 19|   compile:
 20|     name: Compile & Hygiene
 21|     runs-on: [ self-hosted, 1ES.Pool=1es-vscode-oss-ubuntu-22.04-x64 ]
 22|     steps:
 23|       - name: Checkout microsoft/vscode
 24|         uses: actions/checkout@v4
 25| 
 26|       - name: Setup Node.js
 27|         uses: actions/setup-node@v4
 28|         with:
 29|           node-version-file: .nvmrc
 30|         env:
 31|           NODEJS_ORG_MIRROR: https://github.com/joaomoreno/node-mirror/releases/download
 32| 
 33|       - name: Prepare node_modules cache key
 34|         run: mkdir -p .build && node build/azure-pipelines/common/computeNodeModulesCacheKey.js compile $(node -p process.arch) > .build/packagelockhash
 35| 
 36|       - name: Restore node_modules cache
 37|         id: cache-node-modules
 38|         uses: actions/cache/restore@v4
 39|         with:
 40|           path: .build/node_modules_cache
 41|           key: "node_modules-compile-${{ hashFiles('.build/packagelockhash') }}"
 42| 
 43|       - name: Extract node_modules cache
 44|         if: steps.cache-node-modules.outputs.cache-hit == 'true'
 45|         run: tar -xzf .build/node_modules_cache/cache.tgz
 46| 
 47|       - name: Install build tools
 48|         if: steps.cache-node-modules.outputs.cache-hit != 'true'
 49|         run: sudo apt update -y && sudo apt install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev libnotify-bin libkrb5-dev
 50| 
 51|       - name: Install dependencies
 52|         if: steps.cache-node-modules.outputs.cache-hit != 'true'
 53|         run: |
 54|           set -e
 55| 
 56|           for i in {1..5}; do # try 5 times
 57|             npm ci && break
 58|             if [ $i -eq 5 ]; then
 59|               echo "Npm install failed too many times" >&2
 60|               exit 1
 61|             fi
 62|             echo "Npm install failed $i, trying again..."
 63|           done
 64|         env:
 65|           ELECTRON_SKIP_BINARY_DOWNLOAD: 1
 66|           PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
 67|           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 68| 
 69|       - name: Create node_modules archive
 70|         if: steps.cache-node-modules.outputs.cache-hit != 'true'
 71|         run: |
 72|           set -e
 73|           node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
 74|           mkdir -p .build/node_modules_cache
 75|           tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
 76| 
 77|       - name: Compile /build/ folder
 78|         run: npm run compile
 79|         working-directory: build
 80| 
 81|       - name: Check /build/ folder
 82|         run: .github/workflows/check-clean-git-state.sh
 83| 
 84|       - name: Compile & Hygiene
 85|         run: npm exec -- npm-run-all -lp core-ci-pr extensions-ci-pr hygiene eslint valid-layers-check define-class-fields-check vscode-dts-compile-check tsec-compile-check
 86|         env:
 87|           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 88| 
 89|   linux-cli-tests:
 90|     name: Linux
 91|     uses: ./.github/workflows/pr-linux-cli-test.yml
 92|     with:
 93|       job_name: CLI
 94|       rustup_toolchain: 1.85
 95| 
 96|   linux-electron-tests:
 97|     name: Linux
 98|     uses: ./.github/workflows/pr-linux-test.yml
 99|     with:
100|       job_name: Electron
101|       electron_tests: true
102| 
103|   linux-browser-tests:
104|     name: Linux
105|     uses: ./.github/workflows/pr-linux-test.yml
106|     with:
107|       job_name: Browser
108|       browser_tests: true
109| 
110|   linux-remote-tests:
111|     name: Linux
112|     uses: ./.github/workflows/pr-linux-test.yml
113|     with:
114|       job_name: Remote
115|       remote_tests: true
116| 
117|   macos-electron-tests:
118|     name: macOS
119|     uses: ./.github/workflows/pr-darwin-test.yml
120|     with:
121|       job_name: Electron
122|       electron_tests: true
123| 
124|   macos-browser-tests:
125|     name: macOS
126|     uses: ./.github/workflows/pr-darwin-test.yml
127|     with:
128|       job_name: Browser
129|       browser_tests: true
130| 
131|   macos-remote-tests:
132|     name: macOS
133|     uses: ./.github/workflows/pr-darwin-test.yml
134|     with:
135|       job_name: Remote
136|       remote_tests: true
137| 
138|   windows-electron-tests:
139|     name: Windows
140|     uses: ./.github/workflows/pr-win32-test.yml
141|     with:
142|       job_name: Electron
143|       electron_tests: true
144| 
145|   windows-browser-tests:
146|     name: Windows
147|     uses: ./.github/workflows/pr-win32-test.yml
148|     with:
149|       job_name: Browser
150|       browser_tests: true
151| 
152|   windows-remote-tests:
153|     name: Windows
154|     uses: ./.github/workflows/pr-win32-test.yml
155|     with:
156|       job_name: Remote
157|       remote_tests: true
158| 
```

### Workflow WF02: `.github/workflows/no-yarn-lock-changes.yml`
```yaml
  1| name: Prevent yarn.lock changes in PRs
  2| 
  3| on: pull_request
  4| permissions: {}
  5| 
  6| jobs:
  7|   main:
  8|     name: Prevent yarn.lock changes in PRs
  9|     runs-on: ubuntu-latest
 10|     steps:
 11|       - name: Get file changes
 12|         uses: trilom/file-changes-action@a6ca26c14274c33b15e6499323aac178af06ad4b # v1.2.4
 13|         id: file_changes
 14|       - name: Check if lockfiles were modified
 15|         id: lockfile_check
 16|         run: |
 17|           if cat $HOME/files.json | jq -e 'any(test("yarn\\.lock$|Cargo\\.lock$"))' > /dev/null; then
 18|             echo "lockfiles_modified=true" >> $GITHUB_OUTPUT
 19|             echo "Lockfiles were modified in this PR"
 20|           else
 21|             echo "lockfiles_modified=false" >> $GITHUB_OUTPUT
 22|             echo "No lockfiles were modified in this PR"
 23|           fi
 24|       - name: Prevent Copilot from modifying lockfiles
 25|         if: ${{ steps.lockfile_check.outputs.lockfiles_modified == 'true' && github.event.pull_request.user.login == 'Copilot' }}
 26|         run: |
 27|           echo "Copilot is not allowed to modify yarn.lock or Cargo.lock files."
 28|           echo "If you need to update dependencies, please do so manually or through authorized means."
 29|           exit 1
 30|       - uses: octokit/request-action@dad4362715b7fb2ddedf9772c8670824af564f0d # v2.4.0
 31|         id: get_permissions
 32|         if: ${{ steps.lockfile_check.outputs.lockfiles_modified == 'true' && github.event.pull_request.user.login != 'Copilot' }}
 33|         with:
 34|           route: GET /repos/microsoft/vscode/collaborators/{username}/permission
 35|           username: ${{ github.event.pull_request.user.login }}
 36|         env:
 37|           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 38|       - name: Set control output variable
 39|         id: control
 40|         if: ${{ steps.lockfile_check.outputs.lockfiles_modified == 'true' && github.event.pull_request.user.login != 'Copilot' }}
 41|         run: |
 42|           echo "user: ${{ github.event.pull_request.user.login }}"
 43|           echo "role: ${{ fromJson(steps.get_permissions.outputs.data).permission }}"
 44|           echo "is dependabot: ${{ github.event.pull_request.user.login == 'dependabot[bot]' }}"
 45|           echo "should_run: ${{ !contains(fromJson('["admin", "maintain", "write"]'), fromJson(steps.get_permissions.outputs.data).permission) }}"
 46|           echo "should_run=${{ !contains(fromJson('["admin", "maintain", "write"]'), fromJson(steps.get_permissions.outputs.data).permission) && github.event.pull_request.user.login != 'dependabot[bot]' }}" >> $GITHUB_OUTPUT
 47|       - name: Check for lockfile changes
 48|         if: ${{ steps.lockfile_check.outputs.lockfiles_modified == 'true' && steps.control.outputs.should_run == 'true' }}
 49|         run: |
 50|           echo "Changes to yarn.lock/Cargo.lock files aren't allowed in PRs."
 51|           exit 1
 52| 
```

### Workflow WF03: `.github/workflows/monaco-editor.yml`
```yaml
  1| name: Monaco Editor checks
  2| 
  3| on:
  4|   push:
  5|     branches:
  6|       - main
  7|       - release/*
  8|   pull_request:
  9|     branches:
 10|       - main
 11|       - release/*
 12| permissions: {}
 13| 
 14| jobs:
 15|   main:
 16|     name: Monaco Editor checks
 17|     runs-on: ubuntu-latest
 18|     timeout-minutes: 40
 19|     env:
 20|       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 21|     steps:
 22|       - uses: actions/checkout@v4
 23|         with:
 24|           persist-credentials: false
 25| 
 26|       - uses: actions/setup-node@v4
 27|         with:
 28|           node-version-file: .nvmrc
 29| 
 30|       - name: Compute node modules cache key
 31|         id: nodeModulesCacheKey
 32|         run: echo "value=$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js)" >> $GITHUB_OUTPUT
 33|       - name: Cache node modules
 34|         id: cacheNodeModules
 35|         uses: actions/cache@v4
 36|         with:
 37|           path: "**/node_modules"
 38|           key: ${{ runner.os }}-cacheNodeModules20-${{ steps.nodeModulesCacheKey.outputs.value }}
 39|           restore-keys: ${{ runner.os }}-cacheNodeModules20-
 40|       - name: Get npm cache directory path
 41|         id: npmCacheDirPath
 42|         if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
 43|         run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
 44|       - name: Cache npm directory
 45|         if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
 46|         uses: actions/cache@v4
 47|         with:
 48|           path: ${{ steps.npmCacheDirPath.outputs.dir }}
 49|           key: ${{ runner.os }}-npmCacheDir-${{ steps.nodeModulesCacheKey.outputs.value }}
 50|           restore-keys: ${{ runner.os }}-npmCacheDir-
 51|       - name: Install system dependencies
 52|         if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
 53|         run: |
 54|           sudo apt update
 55|           sudo apt install -y libxkbfile-dev pkg-config libkrb5-dev libxss1
 56|       - name: Execute npm
 57|         if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
 58|         env:
 59|           PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
 60|           ELECTRON_SKIP_BINARY_DOWNLOAD: 1
 61|         run: |
 62|           npm ci
 63| 
 64|       - name: Download Playwright
 65|         run: npm run playwright-install
 66| 
 67|       - name: Run Monaco Editor Checks
 68|         run: npm run monaco-compile-check
 69| 
 70|       - name: Editor Distro & ESM
 71|         run: npm run gulp editor-distro
 72| 
 73|       - name: Editor ESM sources check
 74|         working-directory: ./test/monaco
 75|         run: npm run esm-check
 76| 
 77|       - name: Typings validation prep
 78|         run: |
 79|           mkdir typings-test
 80| 
 81|       - name: Typings validation
 82|         working-directory: ./typings-test
 83|         run: |
 84|           npm init -yp
 85|           ../node_modules/.bin/tsc --init
 86|           echo "import '../out-monaco-editor-core';" > a.ts
 87|           ../node_modules/.bin/tsc --noEmit
 88| 
 89|       - name: Package Editor with Webpack
 90|         working-directory: ./test/monaco
 91|         run: npm run bundle-webpack
 92| 
 93|       - name: Compile Editor Tests
 94|         working-directory: ./test/monaco
 95|         run: npm run compile
 96| 
 97|       - name: Run Editor Tests
 98|         timeout-minutes: 5
 99|         working-directory: ./test/monaco
100|         run: npm run test
101| 
```

## Critical Instructions

### 1. Workflow Identification
- Each workflow has an ID (WF01, WF02, etc.) and file path
- Use the exact workflow_file path in your response
- Reference the correct workflow ID when analyzing

### 2. Line Number Requirements
- **MANDATORY**: Provide exact line numbers relative to each workflow file start
- Be precise - reference the actual line where optimization applies
- Example: If optimization is on line 25 of WF02, use "25" (not cumulative line number)

### 3. Impact Calculation
- Time savings per run (realistic minutes)
- Monthly cost: $0.008/minute × time_saved × 23 runs/week × 4.33 weeks
- Implementation effort: low/medium/high
- Confidence: 0.0-1.0 based on pattern clarity

### 4. Required Output
Return ONLY a JSON array with ALL optimizations found across ALL workflows:

```json
[
  {
    "title": "Add Node.js Dependency Caching",
    "type": "caching",
    "priority": "high",
    "workflow_file": ".github/workflows/ci.yml",
    "job_name": "build",
    "line_number": "47",
    "description": "Missing npm dependency caching causing repeated installs",
    "impact_time_minutes": 3.0,
    "monthly_cost_savings": 31.19,
    "confidence_score": 0.9,
    "implementation_effort": "low",
    "implementation": "Add actions/cache@v3 before npm install",
    "code_example": "- uses: actions/cache@v3\n  with:\n    path: ~/.npm\n    key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}"
  }
]
```
